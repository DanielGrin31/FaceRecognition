@page "/"
@inherits BasePage
@inject IJSRuntime JS
@using FaceRecognition.UI.ClassLib.Models.Responses
@using FaceRecognition.UI.ClassLib.Services
@using System.Text.Json;
@using Blazored.LocalStorage
@using FaceRecognition.UI.ClassLib.Models.EventArgs
@inject IImageProcessingService ImageProcessing
@inject ILocalStorageService LocalStorage
@implements IDisposable
<PageTitle>Home</PageTitle>
<div class=" d-flex flex-column">
    <h1 class="text-light p-4 text-center user-select-none">Upload and Process Images</h1>
    <div class="main-container">
        <div class="w-100 h-100 d-flex flex-column">
            <div class="d-flex align-items-center justify-content-center flex-grow-1">
                <div class="col-4">
                    <ImageBox @ref="_ImageBoxes[0]" @bind-ViewModel="_ViewModels[0]"
                              LoadingRequested="OnLoadingStartedAsync"
                              FinishLoading="OnLoadingFinishedAsync"
                              RefreshRequested="OnRefresh" Id="1"
                              ShowError="ShowError"/>
                </div>
                <!--add the  Buttons for the main page  -->
                <div class=" d-flex col-2 flex-column align-items-center">
                    @if (_Loading)
                    {
                        <div class="spinner-border text-warning" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    }

                    @if (ImageCount == 0)
                    {
                        <button id="startVideoBtn" @onclick="StartVideoCapture" class="submit-btn rounded-3 w-75 m-2"
                                type="button">
                            Start Video
                        </button>
                    }
                    else
                    {
                        <button name="action" @onclick="SearchSimilar" class="submit-btn w-75 m-2">Check</button>
                        if (ImageCount == 2)
                        {
                            <button name="action" @onclick="CompareImages" class="submit-btn w-75 m-2">Compare</button>
                        }
                    }
                </div>
                <div class="col-4">
                    <ImageBox @ref="_ImageBoxes[1]" @bind-ViewModel="_ViewModels[1]"
                              LoadingRequested="OnLoadingStartedAsync"
                              FinishLoading="OnLoadingFinishedAsync"
                              ShowError="ShowError"
                              RefreshRequested="OnRefresh" Id="2"/>
                </div>

            </div>

            <ParametersSection>
                <div class="row">
                    <div class="offset-4 col-2">Similarity Threshold:</div>
                    <div class="col-1 d-flex">
                        <input class="parameter" min="0" max="1" @bind-value="@_SimilarityThreshold"
                               @bind-value:event="oninput" step="0.05" type="range" id="similarityThreshRange"
                               name="SimilarityThreshold"/>
                        <output class="ms-1">@_SimilarityThreshold</output>
                    </div>
                </div>
                <div class="row">
                    <div class="offset-4 col-2">Quality Threshold:</div>
                    <div class="col-1 d-flex">
                        <input class="parameter" min="0" max="3" @bind-value="@_QualityThreshold"
                               @bind-value:event="oninput" step="0.1" type="range"
                               name="QualityThreshold"/>
                        <output class="ms-1">@_QualityThreshold</output>
                    </div>
                </div>
            </ParametersSection>
        </div>

    </div>

</div>

<script src="js/image.js"></script>
<Modal @ref="_Modal"></Modal>


@code {
    readonly ImageBoxViewModel[] _ViewModels = [new ImageBoxViewModel(), new ImageBoxViewModel()];
    readonly ImageBox[] _ImageBoxes = new ImageBox[2];
    private int ImageCount => _ViewModels.Count(x => !string.IsNullOrEmpty(x.ImgName));
    private float _SimilarityThreshold = 0.5f;
    private float _QualityThreshold;
    private DotNetObjectReference<Home>? _ObjRef;

    [JSInvokable]
    public async Task VideoCaptured(JsonElement value)
    {
        if (value.ValueKind == JsonValueKind.Null)
        {
            await OnLoadingFinishedAsync();
            StateHasChanged();
            await ShowError("Failed to upload from video! check connection to the server");
            return;
        }

        int index = ImageCount % 2;
        _ViewModels[index].FaceNum = -2;
        var response = value.Deserialize<UploadImagesResponse?>();
        if (response is not null)
        {
            await _ImageBoxes[index].UpdateFromResponse(response);
            await SaveState();
        }

        await OnLoadingFinishedAsync();
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        for (int i = 0; i < _ViewModels.Length; i++)
        {
            _ViewModels[i] = await LocalStorage.GetItemAsync<ImageBoxViewModel>($"imageBox{i + 1}") ?? new ImageBoxViewModel();
        }

        if (Layout != null)
            Layout.ImageBoxChanged += OnImageBoxChanged;
        _SimilarityThreshold = await LocalStorage.GetItemAsync<float>("similarity_thresh");
        _QualityThreshold = await LocalStorage.GetItemAsync<float>("quality_thresh");
        await base.OnInitializedAsync();
    }

    private async void OnImageBoxChanged(object? sender, ImageBoxChangedEventArgs e)
    {
        if (e.Index < _ViewModels.Length)
        {
            _ViewModels[e.Index].CopyFrom(e.ViewModel);
        }

        await SaveState();
        StateHasChanged();
    }

    private async Task StartVideoCapture()
    {
        _ObjRef = DotNetObjectReference.Create(this);
        await JS.InvokeVoidAsync("startFaceCapture", _ObjRef);
        await OnLoadingStartedAsync();
    }

    private async Task SearchSimilar()
    {
        if (string.IsNullOrEmpty(_ViewModels[0].ImgName))
            return;
        await OnLoadingStartedAsync();
        var response = await ImageProcessing
            .GetMostSimilarImage(_ViewModels[0].ImgName, _ViewModels[0].FaceNum
                , _SimilarityThreshold, (float)_QualityThreshold ,
                Layout?.Models ?? new ModelsConfig());

        if (response.IsT1)
        {
            await ShowError(response.AsT1);
        }

        var valid = response.AsT0;
        if (valid is { Match: true })
        {
            _ViewModels[1].DetectorIndices = valid.DetectorIndices;
            _ViewModels[1].FaceNum = valid.FaceNum;
            _ViewModels[1].FacesLength = valid.FaceLength;
            _ViewModels[1].ImgName = valid.ImageName;
            await _ImageBoxes[1].LoadImage();
            await _Modal.Show([$"Most similar image is {valid.ImageName} with similarity: {valid.Similarity:f4}"], []);
            await SaveState();
            StateHasChanged();
        }
        else
        {
            await _Modal.Show([], ["No matching image found with sufficient similarity or quality"]);
        }

        await OnLoadingFinishedAsync();
    }


    private async Task CompareImages(MouseEventArgs e)
    {
        var result = await
            ImageProcessing.Compare(_ViewModels[0].ImgName, _ViewModels[1].ImgName,
                _ViewModels[0].FaceNum, _ViewModels[1].FaceNum, Layout?.Models ?? new ModelsConfig());
        if (result.IsT1)
        {
            await ShowError(result.AsT1);
        }

        var similarity = result.AsT0;
        await _Modal.Show([$"Similarity is {similarity}"], []);
        await SaveState();
    }

    protected override async Task SaveState()
    {
        for (int i = 0; i < _ViewModels.Length; i++)
        {
            await LocalStorage.SetItemAsync($"imageBox{i + 1}", _ViewModels[i]);
        }

        await LocalStorage.SetItemAsync("quality_thresh", _QualityThreshold);
        await LocalStorage.SetItemAsync("similarity_thresh", _SimilarityThreshold);
    }

    private async Task OnRefresh()
    {
        if (ImageCount == 1 && !string.IsNullOrEmpty(_ViewModels[1].ImgName))
        {
            (_ViewModels[1], _ViewModels[0]) = (_ViewModels[0], _ViewModels[1]);
            StateHasChanged();
            await _ImageBoxes[0].LoadImage();
            await _ImageBoxes[1].OnClearClicked();
        }

        await SaveState();
        StateHasChanged();
    }

    public override void Dispose()
    {
        if (Layout != null) Layout.ImageBoxChanged -= OnImageBoxChanged;
        _ObjRef?.Dispose();
        base.Dispose();
    }

}